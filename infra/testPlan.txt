
Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # data.aws_subnets.subnetsids will be read during apply
  # (config refers to values not yet known)
 <= data "aws_subnets" "subnetsids"  {
      + id   = (known after apply)
      + ids  = (known after apply)
      + tags = (known after apply)

      + filter {
          + name   = "vpc-id"
          + values = [
              + (known after apply),
            ]
        }
    }

  # aws_eip.nat will be created
  + resource "aws_eip" "nat" {
      + allocation_id        = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = (known after apply)
      + id                   = (known after apply)
      + instance             = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Environment"   = "Development"
          + "Name"          = "nat"
          + "Terraform"     = "true"
          + "cloudprovider" = "aws"
          + "owner"         = "devops-team"
        }
      + tags_all             = {
          + "Environment"   = "Development"
          + "Name"          = "nat"
          + "Terraform"     = "true"
          + "cloudprovider" = "aws"
          + "owner"         = "devops-team"
        }
      + vpc                  = true
    }

  # aws_eks_cluster.eks-deployment will be created
  + resource "aws_eks_cluster" "eks-deployment" {
      + arn                   = (known after apply)
      + certificate_authority = (known after apply)
      + created_at            = (known after apply)
      + endpoint              = (known after apply)
      + id                    = (known after apply)
      + identity              = (known after apply)
      + name                  = "eks_deployment01"
      + platform_version      = (known after apply)
      + role_arn              = (known after apply)
      + status                = (known after apply)
      + tags_all              = (known after apply)
      + version               = "1.20"

      + kubernetes_network_config {
          + ip_family         = (known after apply)
          + service_ipv4_cidr = (known after apply)
        }

      + timeouts {
          + create = "40m"
          + delete = "1h"
        }

      + vpc_config {
          + cluster_security_group_id = (known after apply)
          + endpoint_private_access   = false
          + endpoint_public_access    = true
          + public_access_cidrs       = (known after apply)
          + subnet_ids                = (known after apply)
          + vpc_id                    = (known after apply)
        }
    }

  # aws_iam_role.eks-role will be created
  + resource "aws_iam_role" "eks-role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "eks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "eks-cluster-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy {
          + name   = (known after apply)
          + policy = (known after apply)
        }
    }

  # aws_iam_role.nodes will be created
  + resource "aws_iam_role" "nodes" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "eks-node-group-nodes"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy {
          + name   = (known after apply)
          + policy = (known after apply)
        }
    }

  # aws_iam_role_policy_attachment.eks-amazonEKSClusterPolicy will be created
  + resource "aws_iam_role_policy_attachment" "eks-amazonEKSClusterPolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      + role       = "eks-cluster-role"
    }

  # aws_iam_role_policy_attachment.nodes-AmazonEC2ContainerRegistryReadOnly will be created
  + resource "aws_iam_role_policy_attachment" "nodes-AmazonEC2ContainerRegistryReadOnly" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      + role       = "eks-node-group-nodes"
    }

  # aws_iam_role_policy_attachment.nodes-AmazonEKSWorkerNodePolicy will be created
  + resource "aws_iam_role_policy_attachment" "nodes-AmazonEKSWorkerNodePolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      + role       = "eks-node-group-nodes"
    }

  # aws_iam_role_policy_attachment.nodes-AmazonEKS_CNI_Policy will be created
  + resource "aws_iam_role_policy_attachment" "nodes-AmazonEKS_CNI_Policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      + role       = "eks-node-group-nodes"
    }

  # aws_internet_gateway.igw will be created
  + resource "aws_internet_gateway" "igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Environment"   = "Development"
          + "Name"          = "igw"
          + "Terraform"     = "true"
          + "cloudprovider" = "aws"
          + "owner"         = "devops-team"
        }
      + tags_all = {
          + "Environment"   = "Development"
          + "Name"          = "igw"
          + "Terraform"     = "true"
          + "cloudprovider" = "aws"
          + "owner"         = "devops-team"
        }
      + vpc_id   = (known after apply)
    }

  # aws_nat_gateway.nat will be created
  + resource "aws_nat_gateway" "nat" {
      + allocation_id        = (known after apply)
      + connectivity_type    = "public"
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + private_ip           = (known after apply)
      + public_ip            = (known after apply)
      + subnet_id            = (known after apply)
      + tags                 = {
          + "Environment"   = "Development"
          + "Name"          = "nat-eks-public"
          + "Terraform"     = "true"
          + "cloudprovider" = "aws"
          + "owner"         = "devops-team"
        }
      + tags_all             = {
          + "Environment"   = "Development"
          + "Name"          = "nat-eks-public"
          + "Terraform"     = "true"
          + "cloudprovider" = "aws"
          + "owner"         = "devops-team"
        }
    }

  # aws_route_table.private will be created
  + resource "aws_route_table" "private" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = ""
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = (known after apply)
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags             = {
          + "Environment"   = "Development"
          + "Name"          = "route-private"
          + "Terraform"     = "true"
          + "cloudprovider" = "aws"
          + "owner"         = "devops-team"
        }
      + tags_all         = {
          + "Environment"   = "Development"
          + "Name"          = "route-private"
          + "Terraform"     = "true"
          + "cloudprovider" = "aws"
          + "owner"         = "devops-team"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table.public will be created
  + resource "aws_route_table" "public" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags             = {
          + "Environment"   = "Development"
          + "Name"          = "route-public"
          + "Terraform"     = "true"
          + "cloudprovider" = "aws"
          + "owner"         = "devops-team"
        }
      + tags_all         = {
          + "Environment"   = "Development"
          + "Name"          = "route-public"
          + "Terraform"     = "true"
          + "cloudprovider" = "aws"
          + "owner"         = "devops-team"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.privateRTassociation[0] will be created
  + resource "aws_route_table_association" "privateRTassociation" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.privateRTassociation[1] will be created
  + resource "aws_route_table_association" "privateRTassociation" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.privateRTassociation[2] will be created
  + resource "aws_route_table_association" "privateRTassociation" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.publicRTassociation[0] will be created
  + resource "aws_route_table_association" "publicRTassociation" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.publicRTassociation[1] will be created
  + resource "aws_route_table_association" "publicRTassociation" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.publicRTassociation[2] will be created
  + resource "aws_route_table_association" "publicRTassociation" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_subnet.eks_private_subnet[0] will be created
  + resource "aws_subnet" "eks_private_subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment"                     = "Development"
          + "Name"                            = "eks-private-subnet-0-us-east-1a"
          + "Terraform"                       = "true"
          + "cloudprovider"                   = "aws"
          + "kubernetes.io/cluster/demo"      = "owned"
          + "kubernetes.io/role/internal-elb" = "1"
          + "owner"                           = "devops-team"
        }
      + tags_all                                       = {
          + "Environment"                     = "Development"
          + "Name"                            = "eks-private-subnet-0-us-east-1a"
          + "Terraform"                       = "true"
          + "cloudprovider"                   = "aws"
          + "kubernetes.io/cluster/demo"      = "owned"
          + "kubernetes.io/role/internal-elb" = "1"
          + "owner"                           = "devops-team"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.eks_private_subnet[1] will be created
  + resource "aws_subnet" "eks_private_subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment"                     = "Development"
          + "Name"                            = "eks-private-subnet-1-us-east-1b"
          + "Terraform"                       = "true"
          + "cloudprovider"                   = "aws"
          + "kubernetes.io/cluster/demo"      = "owned"
          + "kubernetes.io/role/internal-elb" = "1"
          + "owner"                           = "devops-team"
        }
      + tags_all                                       = {
          + "Environment"                     = "Development"
          + "Name"                            = "eks-private-subnet-1-us-east-1b"
          + "Terraform"                       = "true"
          + "cloudprovider"                   = "aws"
          + "kubernetes.io/cluster/demo"      = "owned"
          + "kubernetes.io/role/internal-elb" = "1"
          + "owner"                           = "devops-team"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.eks_private_subnet[2] will be created
  + resource "aws_subnet" "eks_private_subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1c"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.3.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment"                     = "Development"
          + "Name"                            = "eks-private-subnet-2-us-east-1c"
          + "Terraform"                       = "true"
          + "cloudprovider"                   = "aws"
          + "kubernetes.io/cluster/demo"      = "owned"
          + "kubernetes.io/role/internal-elb" = "1"
          + "owner"                           = "devops-team"
        }
      + tags_all                                       = {
          + "Environment"                     = "Development"
          + "Name"                            = "eks-private-subnet-2-us-east-1c"
          + "Terraform"                       = "true"
          + "cloudprovider"                   = "aws"
          + "kubernetes.io/cluster/demo"      = "owned"
          + "kubernetes.io/role/internal-elb" = "1"
          + "owner"                           = "devops-team"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.eks_public_subnet[0] will be created
  + resource "aws_subnet" "eks_public_subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.4.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment"                     = "Development"
          + "Name"                            = "eks-public-subnet-0-us-east-1a"
          + "Terraform"                       = "true"
          + "cloudprovider"                   = "aws"
          + "kubernetes.io/cluster/demo"      = "owned"
          + "kubernetes.io/role/internal-elb" = "1"
          + "owner"                           = "devops-team"
        }
      + tags_all                                       = {
          + "Environment"                     = "Development"
          + "Name"                            = "eks-public-subnet-0-us-east-1a"
          + "Terraform"                       = "true"
          + "cloudprovider"                   = "aws"
          + "kubernetes.io/cluster/demo"      = "owned"
          + "kubernetes.io/role/internal-elb" = "1"
          + "owner"                           = "devops-team"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.eks_public_subnet[1] will be created
  + resource "aws_subnet" "eks_public_subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.5.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment"                     = "Development"
          + "Name"                            = "eks-public-subnet-1-us-east-1b"
          + "Terraform"                       = "true"
          + "cloudprovider"                   = "aws"
          + "kubernetes.io/cluster/demo"      = "owned"
          + "kubernetes.io/role/internal-elb" = "1"
          + "owner"                           = "devops-team"
        }
      + tags_all                                       = {
          + "Environment"                     = "Development"
          + "Name"                            = "eks-public-subnet-1-us-east-1b"
          + "Terraform"                       = "true"
          + "cloudprovider"                   = "aws"
          + "kubernetes.io/cluster/demo"      = "owned"
          + "kubernetes.io/role/internal-elb" = "1"
          + "owner"                           = "devops-team"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.eks_public_subnet[2] will be created
  + resource "aws_subnet" "eks_public_subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1c"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.6.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment"                     = "Development"
          + "Name"                            = "eks-public-subnet-2-us-east-1c"
          + "Terraform"                       = "true"
          + "cloudprovider"                   = "aws"
          + "kubernetes.io/cluster/demo"      = "owned"
          + "kubernetes.io/role/internal-elb" = "1"
          + "owner"                           = "devops-team"
        }
      + tags_all                                       = {
          + "Environment"                     = "Development"
          + "Name"                            = "eks-public-subnet-2-us-east-1c"
          + "Terraform"                       = "true"
          + "cloudprovider"                   = "aws"
          + "kubernetes.io/cluster/demo"      = "owned"
          + "kubernetes.io/role/internal-elb" = "1"
          + "owner"                           = "devops-team"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.main_vpc will be created
  + resource "aws_vpc" "main_vpc" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_classiclink                   = (known after apply)
      + enable_classiclink_dns_support       = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = true
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Environment"   = "Development"
          + "Name"          = "main"
          + "Terraform"     = "true"
          + "cloudprovider" = "aws"
          + "owner"         = "devops-team"
        }
      + tags_all                             = {
          + "Environment"   = "Development"
          + "Name"          = "main"
          + "Terraform"     = "true"
          + "cloudprovider" = "aws"
          + "owner"         = "devops-team"
        }
    }

Plan: 25 to add, 0 to change, 0 to destroy.

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
